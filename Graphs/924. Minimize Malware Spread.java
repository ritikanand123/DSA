class Solution {
    
    
    public static void union(int x , int y){
        
        int px = find(x);
        int py = find(y);
        
        if(px==py){
            return;
        }else{
            
            if(rank[px]<rank[py]){
                parent[px] = py;
                rank[py]++;
            }else if(rank[px]>rank[py]){
                parent[py] = px;
                rank[px]++;
            }else{
                parent[py] = px;
                rank[px]  = rank[px]+1;
            }
            
        }
        
        
        
    }
    
    public static int find(int x){
        if(parent[x] != x){
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }
    
    
    
    static int parent[] ;
    static int rank[] ;
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        
        
        int n = graph.length;
        parent = new int[n];
        rank = new int[n];
        
        for(int i = 0 ; i < parent.length ;i++){
            parent[i] = i;
        }
        
        for(int  i = 0 ; i < n ;i++){
            for(int j  = i+1 ; j < n ;j++){
                if(graph[i][j]==1){
                    union(i ,j);
                } 
            }
        }
        
        Arrays.sort(initial);
        
        int ifc [] = new int[n];
        
        for(int inf : initial){
            int p  = find(inf);
            ifc[p]++;
        }
        
        
        
        int ans = initial[0] ;
        int maxsafed = -1; 
        
        for(int inf : initial){
            int  p  = find(inf);
            if(rank[p] >maxsafed){
                if(ifc[p] == 1){
                 ans = inf;
                maxsafed = rank[p];   
                }
                
            }
        }
        return ans;
    }
}
